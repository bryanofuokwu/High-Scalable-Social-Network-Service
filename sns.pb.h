// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sns.proto

#ifndef PROTOBUF_sns_2eproto__INCLUDED
#define PROTOBUF_sns_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_sns_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsListReplyImpl();
void InitDefaultsListReply();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsReplyImpl();
void InitDefaultsReply();
void InitDefaultsMessageImpl();
void InitDefaultsMessage();
void InitDefaultsIPPortInfoImpl();
void InitDefaultsIPPortInfo();
inline void InitDefaults() {
  InitDefaultsListReply();
  InitDefaultsRequest();
  InitDefaultsReply();
  InitDefaultsMessage();
  InitDefaultsIPPortInfo();
}
}  // namespace protobuf_sns_2eproto
namespace csce438 {
class IPPortInfo;
class IPPortInfoDefaultTypeInternal;
extern IPPortInfoDefaultTypeInternal _IPPortInfo_default_instance_;
class ListReply;
class ListReplyDefaultTypeInternal;
extern ListReplyDefaultTypeInternal _ListReply_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace csce438
namespace csce438 {

// ===================================================================

class ListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:csce438.ListReply) */ {
 public:
  ListReply();
  virtual ~ListReply();

  ListReply(const ListReply& from);

  inline ListReply& operator=(const ListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListReply(ListReply&& from) noexcept
    : ListReply() {
    *this = ::std::move(from);
  }

  inline ListReply& operator=(ListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReply* internal_default_instance() {
    return reinterpret_cast<const ListReply*>(
               &_ListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ListReply* other);
  friend void swap(ListReply& a, ListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListReply& from);
  void MergeFrom(const ListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string all_users = 1;
  int all_users_size() const;
  void clear_all_users();
  static const int kAllUsersFieldNumber = 1;
  const ::std::string& all_users(int index) const;
  ::std::string* mutable_all_users(int index);
  void set_all_users(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_all_users(int index, ::std::string&& value);
  #endif
  void set_all_users(int index, const char* value);
  void set_all_users(int index, const char* value, size_t size);
  ::std::string* add_all_users();
  void add_all_users(const ::std::string& value);
  #if LANG_CXX11
  void add_all_users(::std::string&& value);
  #endif
  void add_all_users(const char* value);
  void add_all_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& all_users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_all_users();

  // repeated string followers = 2;
  int followers_size() const;
  void clear_followers();
  static const int kFollowersFieldNumber = 2;
  const ::std::string& followers(int index) const;
  ::std::string* mutable_followers(int index);
  void set_followers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_followers(int index, ::std::string&& value);
  #endif
  void set_followers(int index, const char* value);
  void set_followers(int index, const char* value, size_t size);
  ::std::string* add_followers();
  void add_followers(const ::std::string& value);
  #if LANG_CXX11
  void add_followers(::std::string&& value);
  #endif
  void add_followers(const char* value);
  void add_followers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& followers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_followers();

  // @@protoc_insertion_point(class_scope:csce438.ListReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> all_users_;
  ::google::protobuf::RepeatedPtrField< ::std::string> followers_;
  mutable int _cached_size_;
  friend struct ::protobuf_sns_2eproto::TableStruct;
  friend void ::protobuf_sns_2eproto::InitDefaultsListReplyImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:csce438.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string arguments = 2;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 2;
  const ::std::string& arguments(int index) const;
  ::std::string* mutable_arguments(int index);
  void set_arguments(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arguments(int index, ::std::string&& value);
  #endif
  void set_arguments(int index, const char* value);
  void set_arguments(int index, const char* value, size_t size);
  ::std::string* add_arguments();
  void add_arguments(const ::std::string& value);
  #if LANG_CXX11
  void add_arguments(::std::string&& value);
  #endif
  void add_arguments(const char* value);
  void add_arguments(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& arguments() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_arguments();

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:csce438.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> arguments_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct ::protobuf_sns_2eproto::TableStruct;
  friend void ::protobuf_sns_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:csce438.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Reply* other);
  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const PROTOBUF_FINAL { return New(NULL); }

  Reply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:csce438.Reply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend struct ::protobuf_sns_2eproto::TableStruct;
  friend void ::protobuf_sns_2eproto::InitDefaultsReplyImpl();
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:csce438.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // string ip_address = 3;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 3;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_address(::std::string&& value);
  #endif
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // string port_num = 4;
  void clear_port_num();
  static const int kPortNumFieldNumber = 4;
  const ::std::string& port_num() const;
  void set_port_num(const ::std::string& value);
  #if LANG_CXX11
  void set_port_num(::std::string&& value);
  #endif
  void set_port_num(const char* value);
  void set_port_num(const char* value, size_t size);
  ::std::string* mutable_port_num();
  ::std::string* release_port_num();
  void set_allocated_port_num(::std::string* port_num);

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:csce438.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  ::google::protobuf::internal::ArenaStringPtr port_num_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_sns_2eproto::TableStruct;
  friend void ::protobuf_sns_2eproto::InitDefaultsMessageImpl();
};
// -------------------------------------------------------------------

class IPPortInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:csce438.IPPortInfo) */ {
 public:
  IPPortInfo();
  virtual ~IPPortInfo();

  IPPortInfo(const IPPortInfo& from);

  inline IPPortInfo& operator=(const IPPortInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IPPortInfo(IPPortInfo&& from) noexcept
    : IPPortInfo() {
    *this = ::std::move(from);
  }

  inline IPPortInfo& operator=(IPPortInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IPPortInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPPortInfo* internal_default_instance() {
    return reinterpret_cast<const IPPortInfo*>(
               &_IPPortInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(IPPortInfo* other);
  friend void swap(IPPortInfo& a, IPPortInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IPPortInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IPPortInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IPPortInfo& from);
  void MergeFrom(const IPPortInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IPPortInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_address = 1;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 1;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_address(::std::string&& value);
  #endif
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // string port_num = 2;
  void clear_port_num();
  static const int kPortNumFieldNumber = 2;
  const ::std::string& port_num() const;
  void set_port_num(const ::std::string& value);
  #if LANG_CXX11
  void set_port_num(::std::string&& value);
  #endif
  void set_port_num(const char* value);
  void set_port_num(const char* value, size_t size);
  ::std::string* mutable_port_num();
  ::std::string* release_port_num();
  void set_allocated_port_num(::std::string* port_num);

  // string to_user = 3;
  void clear_to_user();
  static const int kToUserFieldNumber = 3;
  const ::std::string& to_user() const;
  void set_to_user(const ::std::string& value);
  #if LANG_CXX11
  void set_to_user(::std::string&& value);
  #endif
  void set_to_user(const char* value);
  void set_to_user(const char* value, size_t size);
  ::std::string* mutable_to_user();
  ::std::string* release_to_user();
  void set_allocated_to_user(::std::string* to_user);

  // string from_user = 4;
  void clear_from_user();
  static const int kFromUserFieldNumber = 4;
  const ::std::string& from_user() const;
  void set_from_user(const ::std::string& value);
  #if LANG_CXX11
  void set_from_user(::std::string&& value);
  #endif
  void set_from_user(const char* value);
  void set_from_user(const char* value, size_t size);
  ::std::string* mutable_from_user();
  ::std::string* release_from_user();
  void set_allocated_from_user(::std::string* from_user);

  // @@protoc_insertion_point(class_scope:csce438.IPPortInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  ::google::protobuf::internal::ArenaStringPtr port_num_;
  ::google::protobuf::internal::ArenaStringPtr to_user_;
  ::google::protobuf::internal::ArenaStringPtr from_user_;
  mutable int _cached_size_;
  friend struct ::protobuf_sns_2eproto::TableStruct;
  friend void ::protobuf_sns_2eproto::InitDefaultsIPPortInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListReply

// repeated string all_users = 1;
inline int ListReply::all_users_size() const {
  return all_users_.size();
}
inline void ListReply::clear_all_users() {
  all_users_.Clear();
}
inline const ::std::string& ListReply::all_users(int index) const {
  // @@protoc_insertion_point(field_get:csce438.ListReply.all_users)
  return all_users_.Get(index);
}
inline ::std::string* ListReply::mutable_all_users(int index) {
  // @@protoc_insertion_point(field_mutable:csce438.ListReply.all_users)
  return all_users_.Mutable(index);
}
inline void ListReply::set_all_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:csce438.ListReply.all_users)
  all_users_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListReply::set_all_users(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:csce438.ListReply.all_users)
  all_users_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListReply::set_all_users(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  all_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:csce438.ListReply.all_users)
}
inline void ListReply::set_all_users(int index, const char* value, size_t size) {
  all_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csce438.ListReply.all_users)
}
inline ::std::string* ListReply::add_all_users() {
  // @@protoc_insertion_point(field_add_mutable:csce438.ListReply.all_users)
  return all_users_.Add();
}
inline void ListReply::add_all_users(const ::std::string& value) {
  all_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:csce438.ListReply.all_users)
}
#if LANG_CXX11
inline void ListReply::add_all_users(::std::string&& value) {
  all_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:csce438.ListReply.all_users)
}
#endif
inline void ListReply::add_all_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  all_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:csce438.ListReply.all_users)
}
inline void ListReply::add_all_users(const char* value, size_t size) {
  all_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:csce438.ListReply.all_users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListReply::all_users() const {
  // @@protoc_insertion_point(field_list:csce438.ListReply.all_users)
  return all_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListReply::mutable_all_users() {
  // @@protoc_insertion_point(field_mutable_list:csce438.ListReply.all_users)
  return &all_users_;
}

// repeated string followers = 2;
inline int ListReply::followers_size() const {
  return followers_.size();
}
inline void ListReply::clear_followers() {
  followers_.Clear();
}
inline const ::std::string& ListReply::followers(int index) const {
  // @@protoc_insertion_point(field_get:csce438.ListReply.followers)
  return followers_.Get(index);
}
inline ::std::string* ListReply::mutable_followers(int index) {
  // @@protoc_insertion_point(field_mutable:csce438.ListReply.followers)
  return followers_.Mutable(index);
}
inline void ListReply::set_followers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:csce438.ListReply.followers)
  followers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListReply::set_followers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:csce438.ListReply.followers)
  followers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListReply::set_followers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  followers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:csce438.ListReply.followers)
}
inline void ListReply::set_followers(int index, const char* value, size_t size) {
  followers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csce438.ListReply.followers)
}
inline ::std::string* ListReply::add_followers() {
  // @@protoc_insertion_point(field_add_mutable:csce438.ListReply.followers)
  return followers_.Add();
}
inline void ListReply::add_followers(const ::std::string& value) {
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:csce438.ListReply.followers)
}
#if LANG_CXX11
inline void ListReply::add_followers(::std::string&& value) {
  followers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:csce438.ListReply.followers)
}
#endif
inline void ListReply::add_followers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:csce438.ListReply.followers)
}
inline void ListReply::add_followers(const char* value, size_t size) {
  followers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:csce438.ListReply.followers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListReply::followers() const {
  // @@protoc_insertion_point(field_list:csce438.ListReply.followers)
  return followers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListReply::mutable_followers() {
  // @@protoc_insertion_point(field_mutable_list:csce438.ListReply.followers)
  return &followers_;
}

// -------------------------------------------------------------------

// Request

// string username = 1;
inline void Request::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::username() const {
  // @@protoc_insertion_point(field_get:csce438.Request.username)
  return username_.GetNoArena();
}
inline void Request::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.Request.username)
}
#if LANG_CXX11
inline void Request::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.Request.username)
}
#endif
inline void Request::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.Request.username)
}
inline void Request::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.Request.username)
}
inline ::std::string* Request::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:csce438.Request.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_username() {
  // @@protoc_insertion_point(field_release:csce438.Request.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:csce438.Request.username)
}

// repeated string arguments = 2;
inline int Request::arguments_size() const {
  return arguments_.size();
}
inline void Request::clear_arguments() {
  arguments_.Clear();
}
inline const ::std::string& Request::arguments(int index) const {
  // @@protoc_insertion_point(field_get:csce438.Request.arguments)
  return arguments_.Get(index);
}
inline ::std::string* Request::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:csce438.Request.arguments)
  return arguments_.Mutable(index);
}
inline void Request::set_arguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:csce438.Request.arguments)
  arguments_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Request::set_arguments(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:csce438.Request.arguments)
  arguments_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Request::set_arguments(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:csce438.Request.arguments)
}
inline void Request::set_arguments(int index, const char* value, size_t size) {
  arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csce438.Request.arguments)
}
inline ::std::string* Request::add_arguments() {
  // @@protoc_insertion_point(field_add_mutable:csce438.Request.arguments)
  return arguments_.Add();
}
inline void Request::add_arguments(const ::std::string& value) {
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:csce438.Request.arguments)
}
#if LANG_CXX11
inline void Request::add_arguments(::std::string&& value) {
  arguments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:csce438.Request.arguments)
}
#endif
inline void Request::add_arguments(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:csce438.Request.arguments)
}
inline void Request::add_arguments(const char* value, size_t size) {
  arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:csce438.Request.arguments)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::arguments() const {
  // @@protoc_insertion_point(field_list:csce438.Request.arguments)
  return arguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:csce438.Request.arguments)
  return &arguments_;
}

// -------------------------------------------------------------------

// Reply

// string msg = 1;
inline void Reply::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reply::msg() const {
  // @@protoc_insertion_point(field_get:csce438.Reply.msg)
  return msg_.GetNoArena();
}
inline void Reply::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.Reply.msg)
}
#if LANG_CXX11
inline void Reply::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.Reply.msg)
}
#endif
inline void Reply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.Reply.msg)
}
inline void Reply::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.Reply.msg)
}
inline ::std::string* Reply::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:csce438.Reply.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reply::release_msg() {
  // @@protoc_insertion_point(field_release:csce438.Reply.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reply::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:csce438.Reply.msg)
}

// -------------------------------------------------------------------

// Message

// string username = 1;
inline void Message::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::username() const {
  // @@protoc_insertion_point(field_get:csce438.Message.username)
  return username_.GetNoArena();
}
inline void Message::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.Message.username)
}
#if LANG_CXX11
inline void Message::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.Message.username)
}
#endif
inline void Message::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.Message.username)
}
inline void Message::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.Message.username)
}
inline ::std::string* Message::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:csce438.Message.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_username() {
  // @@protoc_insertion_point(field_release:csce438.Message.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:csce438.Message.username)
}

// string msg = 2;
inline void Message::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::msg() const {
  // @@protoc_insertion_point(field_get:csce438.Message.msg)
  return msg_.GetNoArena();
}
inline void Message::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.Message.msg)
}
#if LANG_CXX11
inline void Message::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.Message.msg)
}
#endif
inline void Message::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.Message.msg)
}
inline void Message::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.Message.msg)
}
inline ::std::string* Message::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:csce438.Message.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_msg() {
  // @@protoc_insertion_point(field_release:csce438.Message.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:csce438.Message.msg)
}

// string ip_address = 3;
inline void Message::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::ip_address() const {
  // @@protoc_insertion_point(field_get:csce438.Message.ip_address)
  return ip_address_.GetNoArena();
}
inline void Message::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.Message.ip_address)
}
#if LANG_CXX11
inline void Message::set_ip_address(::std::string&& value) {
  
  ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.Message.ip_address)
}
#endif
inline void Message::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.Message.ip_address)
}
inline void Message::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.Message.ip_address)
}
inline ::std::string* Message::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:csce438.Message.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_ip_address() {
  // @@protoc_insertion_point(field_release:csce438.Message.ip_address)
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:csce438.Message.ip_address)
}

// string port_num = 4;
inline void Message::clear_port_num() {
  port_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::port_num() const {
  // @@protoc_insertion_point(field_get:csce438.Message.port_num)
  return port_num_.GetNoArena();
}
inline void Message::set_port_num(const ::std::string& value) {
  
  port_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.Message.port_num)
}
#if LANG_CXX11
inline void Message::set_port_num(::std::string&& value) {
  
  port_num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.Message.port_num)
}
#endif
inline void Message::set_port_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.Message.port_num)
}
inline void Message::set_port_num(const char* value, size_t size) {
  
  port_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.Message.port_num)
}
inline ::std::string* Message::mutable_port_num() {
  
  // @@protoc_insertion_point(field_mutable:csce438.Message.port_num)
  return port_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_port_num() {
  // @@protoc_insertion_point(field_release:csce438.Message.port_num)
  
  return port_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_port_num(::std::string* port_num) {
  if (port_num != NULL) {
    
  } else {
    
  }
  port_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_num);
  // @@protoc_insertion_point(field_set_allocated:csce438.Message.port_num)
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool Message::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& Message::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:csce438.Message.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Message::release_timestamp() {
  // @@protoc_insertion_point(field_release:csce438.Message.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Message::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:csce438.Message.timestamp)
  return timestamp_;
}
inline void Message::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:csce438.Message.timestamp)
}

// -------------------------------------------------------------------

// IPPortInfo

// string ip_address = 1;
inline void IPPortInfo::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPPortInfo::ip_address() const {
  // @@protoc_insertion_point(field_get:csce438.IPPortInfo.ip_address)
  return ip_address_.GetNoArena();
}
inline void IPPortInfo::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.IPPortInfo.ip_address)
}
#if LANG_CXX11
inline void IPPortInfo::set_ip_address(::std::string&& value) {
  
  ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.IPPortInfo.ip_address)
}
#endif
inline void IPPortInfo::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.IPPortInfo.ip_address)
}
inline void IPPortInfo::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.IPPortInfo.ip_address)
}
inline ::std::string* IPPortInfo::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:csce438.IPPortInfo.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPPortInfo::release_ip_address() {
  // @@protoc_insertion_point(field_release:csce438.IPPortInfo.ip_address)
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPPortInfo::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:csce438.IPPortInfo.ip_address)
}

// string port_num = 2;
inline void IPPortInfo::clear_port_num() {
  port_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPPortInfo::port_num() const {
  // @@protoc_insertion_point(field_get:csce438.IPPortInfo.port_num)
  return port_num_.GetNoArena();
}
inline void IPPortInfo::set_port_num(const ::std::string& value) {
  
  port_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.IPPortInfo.port_num)
}
#if LANG_CXX11
inline void IPPortInfo::set_port_num(::std::string&& value) {
  
  port_num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.IPPortInfo.port_num)
}
#endif
inline void IPPortInfo::set_port_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.IPPortInfo.port_num)
}
inline void IPPortInfo::set_port_num(const char* value, size_t size) {
  
  port_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.IPPortInfo.port_num)
}
inline ::std::string* IPPortInfo::mutable_port_num() {
  
  // @@protoc_insertion_point(field_mutable:csce438.IPPortInfo.port_num)
  return port_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPPortInfo::release_port_num() {
  // @@protoc_insertion_point(field_release:csce438.IPPortInfo.port_num)
  
  return port_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPPortInfo::set_allocated_port_num(::std::string* port_num) {
  if (port_num != NULL) {
    
  } else {
    
  }
  port_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_num);
  // @@protoc_insertion_point(field_set_allocated:csce438.IPPortInfo.port_num)
}

// string to_user = 3;
inline void IPPortInfo::clear_to_user() {
  to_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPPortInfo::to_user() const {
  // @@protoc_insertion_point(field_get:csce438.IPPortInfo.to_user)
  return to_user_.GetNoArena();
}
inline void IPPortInfo::set_to_user(const ::std::string& value) {
  
  to_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.IPPortInfo.to_user)
}
#if LANG_CXX11
inline void IPPortInfo::set_to_user(::std::string&& value) {
  
  to_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.IPPortInfo.to_user)
}
#endif
inline void IPPortInfo::set_to_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.IPPortInfo.to_user)
}
inline void IPPortInfo::set_to_user(const char* value, size_t size) {
  
  to_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.IPPortInfo.to_user)
}
inline ::std::string* IPPortInfo::mutable_to_user() {
  
  // @@protoc_insertion_point(field_mutable:csce438.IPPortInfo.to_user)
  return to_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPPortInfo::release_to_user() {
  // @@protoc_insertion_point(field_release:csce438.IPPortInfo.to_user)
  
  return to_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPPortInfo::set_allocated_to_user(::std::string* to_user) {
  if (to_user != NULL) {
    
  } else {
    
  }
  to_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_user);
  // @@protoc_insertion_point(field_set_allocated:csce438.IPPortInfo.to_user)
}

// string from_user = 4;
inline void IPPortInfo::clear_from_user() {
  from_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPPortInfo::from_user() const {
  // @@protoc_insertion_point(field_get:csce438.IPPortInfo.from_user)
  return from_user_.GetNoArena();
}
inline void IPPortInfo::set_from_user(const ::std::string& value) {
  
  from_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:csce438.IPPortInfo.from_user)
}
#if LANG_CXX11
inline void IPPortInfo::set_from_user(::std::string&& value) {
  
  from_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:csce438.IPPortInfo.from_user)
}
#endif
inline void IPPortInfo::set_from_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:csce438.IPPortInfo.from_user)
}
inline void IPPortInfo::set_from_user(const char* value, size_t size) {
  
  from_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:csce438.IPPortInfo.from_user)
}
inline ::std::string* IPPortInfo::mutable_from_user() {
  
  // @@protoc_insertion_point(field_mutable:csce438.IPPortInfo.from_user)
  return from_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPPortInfo::release_from_user() {
  // @@protoc_insertion_point(field_release:csce438.IPPortInfo.from_user)
  
  return from_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPPortInfo::set_allocated_from_user(::std::string* from_user) {
  if (from_user != NULL) {
    
  } else {
    
  }
  from_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_user);
  // @@protoc_insertion_point(field_set_allocated:csce438.IPPortInfo.from_user)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace csce438

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sns_2eproto__INCLUDED
